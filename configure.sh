#! /bin/bash

# Ce script genere des Makefiles intermediaires permettant au Makefile
# principal de fonctionner correctement et *simplement*
out=Makefile.magic


## ajoute une variable au makefile
# arg1 : nom de la variable
# arg2 : valeur de la variable
# arg3 (optionnel) : si defini,verifie que la variable n'est pas deja la
function add_var()
{
    if [ -z "$1" ] || [ -z "$2" ]
    then
	echo "[FATAL] internal function add_var needs 2 arguments"
	exit -1
    fi
    varName=$1
    varValue=$2

#    declare -x "$varName=$varValue"

    [ -z "$3" ] || echo "ifndef $varName" | tee -a $out
    echo "$varName := $varValue" | tee -a $out
    [ -z "$3" ] || echo "endif" | tee -a $out
    echo -e "export $varName\n" >> $out
}

function cond_var()
{
    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
    then
	echo "[FATAL] internal function add_var needs 3 arguments"
	exit -1
    fi
    varCond=$1
    varName=$2
    valueTrue=$3
    valueFalse=$4

    echo "ifdef $varCond" | tee -a $out
    echo "$varName := $valueTrue" | tee -a $out
    [ -z "$4" ] || echo "else" | tee -a $out
    [ -z "$4" ] || echo "$varName := $valueFalse" | tee -a $out
    echo -e "endif\n" | tee -a $out
    echo -e "export $varName\n\n" >> $out
}

function detect_OS()
{
    if [ $(echo $OSTYPE | grep -c "linux") -ge 0 ]
    then
	LINUX=1
	echo @linux installation detected, applying specific paths...
    else
	WIN=1
	echo @windows intallation detected, looking if Cygwin or MinGW...
    fi
}

find_and_add()
{
    if [ -z $1 ] || [ -z $2 ]
    then
	echo '[FATAL] internal function find_and_add needs 2 arguments !'
	exit -1
    fi

    findWhat=$1
    varName=$2

    path=$(type -P $findWhat)
    if [ ! $? -eq 0 ]
    then
	echo "@Shit happens. $findWhat not found in path, trying an alternative solution..."
	return 1
    else
	add_var $varName $path 1
	return 0
    fi
}


echo @Configuration of the Makefiles....
echo @Creating the Makefile.magic file...
detect_OS
#############################################################
# INIT
echo '' > $out
echo -e "# DO NOT EDIT !!!\n# AUTOGENERATED MAKEFILE" >> $out
echo -e "# TO REGENERATE IT AGAIN, USE configure.sh\n\n" >> $out
add_var 'PWD' $(pwd)
#############################################################
# VARIABLES
add_var 'INCLUDES' '$(INCDIRS) $(LIBDIRS) $(EXTLIBDIRS)'
cond_var 'GENERATE_MLI' 'RULES' 'mli'
cond_var 'BYTECODE' 'RULES' \
    '$(RULES) ml-byte ml-called-byte' \
    '$(RULES) ml-nativ ml-called-nativ'
add_var 'RULES' '$(RULES) c-wrapper c-only'
cond_var 'OPT' 'EXE' '$(EXE).opt' ''
if [ -z $WIN ]
then
    add_var 'OBJ' 'o'
else
    add_var 'OBJ' 'obj'
fi
cond_var 'BYTECODE' 'RUNLIB' 'camlrun' 'asmrun'
add_var 'LINKED' '$(foreach file,$(LIBS),-l$(file))'

#############################################################
# CHEMINS
find_and_add 'ocamlc' 'OCAMLC'
find_and_add 'ocamlopt' 'OCAMLOPT'
find_and_add 'ocamlopt.opt' 'OCAMLOPT.OPT'
find_and_add 'ocamldep' 'OCAMLDEP'
if [ -z $WIN ]
then
    add_var 'OCAMLLIB' '/usr/lib/ocaml'
else
    add_var 'OCAMLLIB' 'c:\Program Files (x86)\OCaml\lib'
fi
