                 GNU GO INSTALLATION INSTRUCTIONS

Get the most recent tar file from ftp.gnu.org or a mirror (see
http://www.gnu.org/order/ftp.html for a list).

Untar the sources, change to the directory gnugo-3.6. Now do:

        ./configure [OPTIONS]
        make

Several configure options will be explained below. You do not need to set
these unless you are dissatisfied with GNU Go's performance or wish to vary
the experimental options.

   As an example,

        ./configure --enable-level=9 --enable-cosmic-gnugo

will make a binary in which the default level is 9, and the experimental
"cosmic"' option is enabled. A list of all configure options can be obtained
by running `./configure --help'. Further information about the experimental
options can be found in the next section.

   After running configure and make, you have now made a binary called
`interface/gnugo'. Now (running as root) type

        make install

to install gnugo in `/usr/local/bin'.

   There are different methods of using GNU Go. You may run it from the
command line by just typing:

        gnugo

but it is nicer to run it using CGoban 1 (under X Window System) or Jago (on
any platform with a Java Runtime Environment).

   You can get the most recent version of CGoban 1 from 
http://sourceforge.net/projects/cgoban1/. The earlier version
1.12 is available from http://www.igoweb.org/~wms/comp/cgoban/index.html.
The CGoban version number MUST be 1.9.1 at least or it won't work. CGoban 2
will not work.

   See the file README for instructions on how to run GNU Go from Cgoban, or
for Jago.


                          RAM CACHE

By default, GNU Go makes a cache of 8 Megabytes in RAM for its
internal use. The cache is used to store intermediate results during
its analysis of the position.

Increasing the cache size will often give a modest speed improvement.
If your system has lots of RAM, consider increasing the cache
size. But if the cache is too large, swapping will occur,
causing hard drive accesses and degrading performance. If
your hard drive seems to be running excessively your cache
may be too large. On GNU/Linux systems, you may detect swapping
using the program 'top'. Use the 'f' command to toggle SWAP
display.

You may override the size of the default cache at compile time 
by running one of:

   ./configure --enable-cache-size=n

To set the cache size to n. For example

   ./configure --enable-cache-size=48

creates a cache of size 48. If you omit this, your default
cache size will be 8. You must recompile and reinstall GNU Go
after reconfiguring it by running make and make install.

You may override the compile-time defaults by running gnugo with
the option `--cache-size n', where n is the size (in megabytes) of 
the cache you want, and `--level n' where n is the level desired.
We will discuss setting these parameters next in detail.

                        DEFAULT LEVEL

GNU Go can play at different levels. Up to level 10 is
supported. At level 10 GNU Go is much more accurate but takes
an average of about 1.6 times longer to play than at level 8.

The level can be set at run time using the --level option.
If you don't set this, the default level will be used. You
can set the default level with the configure option
--enable-level=n. For example

./configure --enable-level=9

sets the default level to 9. If you omit this parameter,
the compiler sets the default level to 10. We recommend
using level 10 unless you find it too slow. If you decide
you want to change the default you may rerun configure
and recompile the program.

                            DFA

GNU Go has two versions of the pattern matcher. The default
version uses a Discrete Finite Automaton (DFA). It can be
disabled, giving the old matcher (which was the default in
GNU Go 3.0) with './configure --disable-dfa'.

                     EXPERIMENTAL OPTIONS

--enable-experimental-semeai enables an experimental semeai
module. This will result in an engine that is probably stronger 
but slightly slower and less debugged. It is not guaranteed
that the semeai code could not cause crashes in some situations.

--enable-owl-threats will result in an engine that does more
life and death analysis. It will be stronger but slower.

There are other experimental options but we only mention these.

                            WINDOWS

Windows installation is described in a separate file, called WINDOWS.

                           MACINTOSH

If you have Mac OS X you can build GNU Go using Apple's compiler, 
which is derived from GCC. We recommend adding the flag -no-cpp-precomp
to CFLAGS.

                          THE MANUAL

You can obtain  a printed copy of the  manual by running 'make
gnugo.ps' in  the doc/ directory, then  printing the resulting
postscript file  @file{gnugo.ps}. The manual  contains a great
deal of information about the algorithms of GNU Go. The first
few sections serve as a user's manual.

On platforms supporting info documentation, you can usually
install the manual by executing `make install' (running as
root) from the doc/ directory. The info documentation can
be read conveniently from within Emacs by executing the
command `Control-h i'.




